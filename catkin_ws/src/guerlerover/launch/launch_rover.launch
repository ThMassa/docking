<launch>

    <arg name="record_rover" default="true" />
    <arg name="use_rosbot" default="true" />
    <arg name="fcu_url" default="udp://:14551@" />
    <arg name="gcs_url" default="" />
    <arg name="tgt_system" default="1" />
    <arg name="tgt_component" default="1" />
    <arg name="log_output" default="screen" />
    <arg name="mavros_output" default="log" />
    <arg name="fcu_protocol" default="v2.0" />
    <arg name="respawn_mavros" default="false" />
    <arg name="pluginlists_yaml" default="$(find mavros)/launch/apm_pluginlists.yaml" />
    <arg name="config_yaml" default="$(find aion_control)/config/apm_config.yaml" />
    <arg name="use_bt_joystick" default="false" />
    <arg name="use_mavros" default="true" />
    <arg name="use_cloudwatch" default="false" />
    <arg name="use_realsense" default="false" />

    <arg name="launch_sbg_driver" default="true" />
    <arg name="get_logs" default="false" />
    <arg name="simulate_dock" default="false" />
    <arg name="simulate_dock_with_log" default="false" />
    <arg name="bag_played" default=""/>
    <!-- Point au milieu du stade de l'ENSTA -->
    <arg name="latitude" default="48.418629445475624"/>
    <arg name="longitude" default="-4.473992863608893"/>
    <arg name="yaw" default="-1.5"/>

    <param if="$(arg use_rosbot)" name="use_sim_time" value="false"/>
    <param name="robot_description" command="$(find xacro)/xacro '$(find aion_r1_description)/urdf/r1_sim.urdf.xacro' --inorder" />

    <node
        name="tf_footprint_base"
        pkg="tf"
        type="static_transform_publisher"
        args="0 0 0 0 0 0 base_link base_footprint 40">
    </node>
   
    <node
        name="tf_top_link"
        pkg="tf"
        type="static_transform_publisher"
        args="0 0 0.114485752303901 0 0 0 base_link top_link 40">
    </node>

    <node name="robot_pose_publisher"
        pkg="robot_pose_publisher"
        type="robot_pose_publisher"
        respawn="false"
        output="screen">
    </node>

    <node name="base_to_fcu_broadcaster"
        pkg="tf"
        type="static_transform_publisher"
        args="0 0 0 0 0 0 base_link fcu 100">
    </node>
    
    <node if="$(arg use_mavros)" pkg="mavros" type="mavros_node" name="mavros" required="$(eval not respawn_mavros)" clear_params="true" output="$(arg mavros_output)" respawn="$(arg respawn_mavros)">
        <param name="fcu_url" value="$(arg fcu_url)" />
        <param name="gcs_url" value="$(arg gcs_url)" />
        <param name="target_system_id" value="$(arg tgt_system)" />
        <param name="target_component_id" value="$(arg tgt_component)" />
        <param name="fcu_protocol" value="$(arg fcu_protocol)" />
        <param name="system_id" value="1" />
        <param name="component_id" value="254" />

        <!-- load blacklist, config -->
        <rosparam command="load" file="$(arg pluginlists_yaml)" />
        <rosparam command="load" file="$(arg config_yaml)" />
        
        <!-- Topic Remaps for use on ROS -->
        <remap from="/mavros/vision_pose/pose" to="/robot_pose" />
        <remap from="/mavros/setpoint_velocity/cmd_vel_unstamped" to="/cmd_vel" />
        <!-- Needs MAVROS changes -->
        <remap from="/mavros/obstacle/send" to="/scan" />
    </node>

    <remap from="/pose" to="/robot_pose" />
  
    <!-- Joystick Interface Launch  -->
    <arg name="joy_config" default="ps3" />
    <arg name="joy_dev" default="/dev/input/js0" />
    <arg name="config_filepath" default="$(find teleop_twist_joy)/config/$(arg joy_config).config.yaml" />
    
    <rosparam command="load" file="$(find aion_control)/config/teleop.yaml" />    
    
    <node if="$(arg use_bt_joystick)" pkg="joy" type="joy_node" name="joy_node">
        <param name="dev" value="$(arg joy_dev)" />
        <param name="deadzone" value="0.3" />
        <param name="autorepeat_rate" value="20" />
    </node>

    <include if="$(arg use_cloudwatch)" file="$(find cloudwatch_metrics_collector)/launch/cloudwatch_metrics_collector.launch">
	<arg name="launch_cartographer" value="false" />
    </include> 

    <include if="$(arg use_realsense)" file="$(find aion_navigator_adv)/launch/aion_realsense.launch" />
   
    <node if="$(arg use_bt_joystick)" pkg="teleop_twist_joy" name="teleop_twist_joy" type="teleop_node" />



    <node name="visualization_node" pkg="guerlerover" type="node_visualization.py" output="screen">
    </node>

    <node name="boat_node" pkg="guerlerover" type="node_rover.py" output="screen">
    </node>

    <node name="control_node" pkg="guerlerover" type="node_control.py" output="screen">
    </node>

    <node name="udp_converter_node" pkg="guerlerover" type="node_udp_converter.py" output="screen"
        unless="$(arg simulate_dock)" />
    
    <node name="udp_simulator_node" pkg="guerlerover" type="node_udp_simulator.py" output="screen"
        if="$(arg simulate_dock)" >
        <param name="latitude" type="double" value="$(arg latitude)"/>
        <param name="longitude" type="double" value="$(arg longitude)"/>
        <param name="yaw" type="double" value="$(arg yaw)"/>
    </node>

    <node name="rosbag_player" pkg="rosbag" type="play" output="screen"
        if="$(arg simulate_dock_with_log)"
        args="-l $(arg bag_played) --topics /udp_publisher">
    </node>

    <node pkg="rosbag" type="record" name="rosbag_record_boat"
       args="record -o /home/aion/guerlelogs/rover.bag docking/nav/dock_pose docking/nav/rover_pose /cmd_vel docking/nav/rover_kalman docking/dock/udp_publisher"
       if="$(arg get_logs)" />
    
</launch>
